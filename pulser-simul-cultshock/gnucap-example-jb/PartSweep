#!/usr/bin/python
# PartSweep by Johannes Bauer <JohannesBauer@gmx.de>
# Published under the GNU General Public License version 3 or any later version, at your choice.
# 2008-07-13

import os
import sys
import re

class calcer:
	def __init__(self, headerfile, circuitfile, part, fstart, fend, fstep):
		self.numfiles = 0
		self.headerfile = headerfile
		self.circuitfile = circuitfile
		self.part = part
		self.outprefix = "PartSweep_Output/ckt_tmp"
		self.tempcktfile = self.outprefix + ".ckt"
		self.tempgwavfile = self.outprefix + ".gwav"
		self.files = [ ]
		self.fstart = fstart
		self.fend = fend
		self.fstep = fstep

	def fileno(self, no):
		return self.outprefix + "_%04d.out" % (no)

	def nextfile(self):
		self.numfiles = self.numfiles + 1
		return self.fileno(self.numfiles)

	def calc(self, value):
		outfile = file(self.tempcktfile, "w")

		outfile.write("* Simulation with %s set to %s\n" % (self.part, unify(value)))

		headerfile = file(self.headerfile, "r")
		eof = False
		while not eof:
			line = headerfile.readline()
			outfile.write(line)
			eof = line == ""
		headerfile.close()
		
		circuitfile = file(self.circuitfile, "r")
		eof = False
		while not eof:
			line = circuitfile.readline()
			if line.lstrip().upper().startswith(".END"):
				continue
			elif line.lstrip().upper().startswith(self.part):
				regex = re.compile("^[ \t]*(%s [A-Za-z0-9]+ [A-Za-z0-9]+) [.0-9PNUMKM]+" % (self.part))
				result = regex.match(line)
				if not result:
					print "Regex did not match, bug."
					sys.exit(1)
				else:
					line = result.group(1) + " " + str(value) + "\n"
			outfile.write(line)
			eof = line == ""
		circuitfile.close()

		outfile.write(".opt numdgt=8\n")
		outfile.write(".print op iter(0) v(vout)\n")
		outfile.write(".op\n")
		outfile.write(".print ac v(nodes) vdb(vout)\n")
		nextfile = self.nextfile()
		outfile.write(".ac %s %s %s >%s\n" % (self.fstart, self.fend, self.fstep, nextfile))
		outfile.close()
		self.files.append([nextfile, value])

		print "Calculating %s = %s..." % (self.part, unify(value))
		os.system("gnucap -b %s >/dev/null" % (self.tempcktfile))

	def plotnumber(self, cnt):
		if cnt < 10:
			return str(cnt)
		elif cnt < 10 + 26:
			return chr(65 + cnt - 10)
		return "?"

	def __del__(self):
		outfile = file(self.tempgwavfile, "w")
		outfile.write("#!/usr/bin/gwave -s\n")
		outfile.write("!#\n")
		outfile.write("; gwave script\n")
		if self.numfiles % 6 == 0:
			numpanels = self.numfiles / 6
		else:
			numpanels = (self.numfiles / 6) + 1
		outfile.write("(require-n-wavepanels %d)\n" % (numpanels))
		outfile.write("(set! default-measure1-function 0)\n")
		
		cnt = 0
		for x in self.files:
			filename = x[0]
			val = x[1]
			print "Panel %d, Plot %d (%s): %25s %s" % (cnt / 6, cnt % 6, self.plotnumber(cnt), filename, unify(val))
			outfile.write("(let ((df (find-or-load-wavefile \"%s\")))\n" % filename)
			outfile.write("\t(wavepanel-add-var-setup df (nth-wavepanel %d) \"vdb(vout)\" %d)\n" % (cnt / 6, cnt % 6))
			outfile.write(")\n")
			cnt += 1

		for i in range(numpanels):
			outfile.write("(wavepanel-y-zoom! (nth-wavepanel %d) -30 10)\n" % (i))
		outfile.close()

		os.chmod(self.tempgwavfile, 0755)
		os.system(self.tempgwavfile)

def deunify(val):
	if val.upper().endswith("P"):
		return int(val[0:-1]) * 1E-12
	elif val.upper().endswith("N"):
		return int(val[0:-1]) * 1E-9
	elif val.upper().endswith("U"):
		return int(val[0:-1]) * 1E-6
	elif val.upper().endswith("M"):
		return int(val[0:-1]) * 1E-3
	elif val.upper().endswith("K"):
		return int(val[0:-1]) * 1e3
	elif val.upper().endswith("M"):
		return int(val[0:-1]) * 1e6
	return int(val)

def unify(val):
	if val < 1e-11:
		return "%.2f p" % (val * 1e12)
	elif val < 1e-10:
		return "%.1f p" % (val * 1e12)
	elif val < 1e-9:
		return "%.0f p" % (val * 1e12)
	elif val < 1e-8:
		return "%.2f n" % (val * 1e9)
	elif val < 1e-7:
		return "%.1f n" % (val * 1e9)
	elif val < 1e-6:
		return "%.0f n" % (val * 1e9)
	elif val < 1e-5:
		return "%.2f u" % (val * 1e6)
	elif val < 1e-4:
		return "%.1f u" % (val * 1e6)
	elif val < 1e-3:
		return "%.0f u" % (val * 1e6)
	elif val < 1e-2:
		return "%.2f m" % (val * 1e3)
	elif val < 1e-1:
		return "%.1f m" % (val * 1e3)
	elif val < 1e-0:
		return "%.0f m" % (val * 1e3)
	elif val < 1e1:
		return "%.2f" % (val * 1e0)
	elif val < 1e2:
		return "%.1f" % (val * 1e0)
	elif val < 1e3:
		return "%.0f" % (val * 1e0)
	elif val < 1e4:
		return "%.2f k" % (val * 1e-3)
	elif val < 1e5:
		return "%.1f k" % (val * 1e-3)
	elif val < 1e6:
		return "%.0f k" % (val * 1e-3)
	elif val < 1e7:
		return "%.2f M" % (val * 1e-6)
	elif val < 1e8:
		return "%.1f M" % (val * 1e-6)
	elif val < 1e9:
		return "%.0f M" % (val * 1e-6)
	elif val < 1e10:
		return "%.2f G" % (val * 1e-9)
	elif val < 1e11:
		return "%.1f G" % (val * 1e-9)
	elif val < 1e12:
		return "%.0f G" % (val * 1e-9)
	return str(val)

if len(sys.argv) < 7:
	print "%s [Headerfile] [Netlist-File] [Part] [Startfrequency] [Endfrequency] [Frequencystep] (((([Lin/Log]) [Number of files]) [Range1]) [Range2])" % (sys.argv[0])
	print
	print "Examples: %s simplefilter.hdr simplefilter.net 10 10k oct R1" % (sys.argv[0])
	print "          %s simplefilter.hdr simplefilter.net 10 10k 100 R1 lin" % (sys.argv[0])
	print "          %s simplefilter.hdr simplefilter.net 10 10k 100 R5 log 18" % (sys.argv[0])
	print "          %s simplefilter.hdr simplefilter.net 10 10k 100 R2 log 18 10k" % (sys.argv[0])
	print "          %s simplefilter.hdr simplefilter.net 10 10k 100 C1 lin 12 3p 330n" % (sys.argv[0])
	print "          %s simplefilter.hdr simplefilter.net 10 10k 100 L4 lin 6 3m 4m" % (sys.argv[0])
	sys.exit(1)

headerfile = sys.argv[1]
circuitfile = sys.argv[2]
fstart = sys.argv[3]
fend = sys.argv[4]
fstep = sys.argv[5]
part = sys.argv[6].upper()
lin = False
nrfiles = 12
range1 = None
range2 = None

if len(sys.argv) > 7:
	lin = sys.argv[7].upper() == "LIN"
	if not lin and sys.argv[7].upper() != "LOG":
		print "Argument must be either 'lin' or 'log'."
		sys.exit(1)

if len(sys.argv) > 8:
	nrfiles = int(sys.argv[8])

if len(sys.argv) > 9:
	range1 = deunify(sys.argv[9])

if len(sys.argv) > 10:
	range2 = deunify(sys.argv[10])

if not range1:
	f = file(circuitfile, "r")
	eof = False
	while not eof:
		line = f.readline().lstrip().upper()
		eof = line == ""
		if line.startswith(part):
			regex = re.compile("^[ \t]*%s [A-Za-z0-9]+ [A-Za-z0-9]+ ([.0-9PNUMKM]+)" % (part))
			result = regex.match(line)
			if result:
				range1 = deunify(result.group(1))
			else:
				print "Cannot find value of part %s, bailing." % (part)
				sys.exit(1)
	f.close()

c = calcer(headerfile, circuitfile, part, fstart, fend, fstep)

totalrange = 0.85
if not range2:
	lower = (1 - totalrange) * range1
	upper = (1 + totalrange) * range1
else:
	lower = range1
	upper = range2

if upper < lower:
	print "Upper boundary must be greater than lower boundary."
	sys.exit(1)

num = 0
current = lower
if lin:
	step = (upper - lower) / (nrfiles - 1)
	while num < nrfiles:
		c.calc(current)
		current += step
		num += 1
else:
	step = pow((upper / lower), 1. / (nrfiles - 1))
	while num < nrfiles:
		c.calc(current)
		current *= step
		num += 1

